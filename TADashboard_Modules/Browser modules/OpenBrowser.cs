///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace TADashboard_Modules.Browser_modules
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The OpenBrowser recording.
    /// </summary>
    [TestModule("fbdfe932-3144-40d4-abbd-7cb4c10896f4", ModuleType.Recording, 1)]
    public partial class OpenBrowser : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::TADashboard_Modules.TADashboard_Repository repository.
        /// </summary>
        public static global::TADashboard_Modules.TADashboard_Repository repo = global::TADashboard_Modules.TADashboard_Repository.Instance;

        static OpenBrowser instance = new OpenBrowser();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public OpenBrowser()
        {
            modPageUrl = "";
            modBrowserName = "";
            modIsPrivateMode = "True";
            modArguments = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static OpenBrowser Instance
        {
            get { return instance; }
        }

#region Variables

        string _modPageUrl;

        /// <summary>
        /// Gets or sets the value of variable modPageUrl.
        /// </summary>
        [TestVariable("a7f7a54e-d68e-49f8-a64c-e7517631a3d1")]
        public string modPageUrl
        {
            get { return _modPageUrl; }
            set { _modPageUrl = value; }
        }

        string _modBrowserName;

        /// <summary>
        /// Gets or sets the value of variable modBrowserName.
        /// </summary>
        [TestVariable("6c716692-6039-49d0-a0c5-fe79593d195b")]
        public string modBrowserName
        {
            get { return _modBrowserName; }
            set { _modBrowserName = value; }
        }

        string _modIsPrivateMode;

        /// <summary>
        /// Gets or sets the value of variable modIsPrivateMode.
        /// </summary>
        [TestVariable("5f67480e-bf9a-4860-9e30-647e83837ae2")]
        public string modIsPrivateMode
        {
            get { return _modIsPrivateMode; }
            set { _modIsPrivateMode = value; }
        }

        string _modArguments;

        /// <summary>
        /// Gets or sets the value of variable modArguments.
        /// </summary>
        [TestVariable("1527b5ea-351c-4a3f-b0ef-b74313198265")]
        public string modArguments
        {
            get { return _modArguments; }
            set { _modArguments = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            // Open browser
            Report.Log(ReportLevel.Info, "Website", "Open browser\r\nOpening web site URL in variable $modPageUrl with browser specified by variable $modBrowserName in maximized mode.", new RecordItemIndex(0));
            Host.Current.OpenBrowser(modPageUrl, modBrowserName, modArguments, false, true, false, false, false, Boolean.Parse(modIsPrivateMode), false, true);
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
